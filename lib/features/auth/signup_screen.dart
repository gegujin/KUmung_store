import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:kumeong_store/core/router/route_names.dart' as R;
import 'package:kumeong_store/api_service.dart'; // register Ìï®Ïàò ÌïÑÏöî

class SignUpPage extends StatefulWidget {
  const SignUpPage({super.key});

  @override
  State<SignUpPage> createState() => _SignUpPageState();
}

class _SignUpPageState extends State<SignUpPage> {
  final TextEditingController emailController = TextEditingController();
  final TextEditingController nameController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  final TextEditingController passwordConfirmController =
      TextEditingController();
  bool isLoading = false;

  Future<void> _signUp() async {
    final email = emailController.text.trim();
    final name = nameController.text.trim();
    final password = passwordController.text.trim();
    final passwordConfirm = passwordConfirmController.text.trim();

    if (email.isEmpty ||
        name.isEmpty ||
        password.isEmpty ||
        passwordConfirm.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Î™®Îì† Ìï≠Î™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî')),
      );
      return;
    }

    if (password != passwordConfirm) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('ÎπÑÎ∞ÄÎ≤àÌò∏ÏôÄ ÌôïÏù∏Ïù¥ ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§')),
      );
      return;
    }

    setState(() => isLoading = true);

    try {
      // üîπ ÏÑúÎ≤ÑÏóê ÌöåÏõêÍ∞ÄÏûÖ ÏöîÏ≤≠
      final token = await register(email, password, name);

      if (!mounted) return;

      if (token != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ! Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô')),
        );
        // üîπ ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ Ïãú Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
        context.goNamed(R.RouteNames.login);
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®: Ïù¥Î©îÏùºÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('ÌöåÏõêÍ∞ÄÏûÖ Ï§ë Ïò§Î•ò Î∞úÏÉù: ${e.toString()}')),
      );
    } finally {
      setState(() => isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final mainColor = Theme.of(context).colorScheme.primary;

    return Scaffold(
      appBar: AppBar(
        backgroundColor: mainColor,
        centerTitle: true,
        title: const Text('ÌöåÏõêÍ∞ÄÏûÖ', style: TextStyle(color: Colors.white)),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            children: [
              const SizedBox(height: 40),
              TextField(
                controller: emailController,
                decoration: const InputDecoration(labelText: 'ÏïÑÏù¥Îîî(Ïù¥Î©îÏùº)'),
                style: const TextStyle(fontSize: 16),
              ),
              const SizedBox(height: 10),
              TextField(
                controller: nameController,
                decoration: const InputDecoration(labelText: 'Ïù¥Î¶Ñ'),
                style: const TextStyle(fontSize: 16),
              ),
              const SizedBox(height: 10),
              TextField(
                controller: passwordController,
                decoration: const InputDecoration(labelText: 'ÎπÑÎ∞ÄÎ≤àÌò∏'),
                obscureText: true,
                style: const TextStyle(fontSize: 16),
              ),
              const SizedBox(height: 10),
              TextField(
                controller: passwordConfirmController,
                decoration: const InputDecoration(labelText: 'ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏'),
                obscureText: true,
                style: const TextStyle(fontSize: 16),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: mainColor,
                  minimumSize: const Size(double.infinity, 55),
                ),
                onPressed: isLoading ? null : _signUp,
                child: isLoading
                    ? const SizedBox(
                        width: 24,
                        height: 24,
                        child: CircularProgressIndicator(color: Colors.white),
                      )
                    : const Text('ÌöåÏõêÍ∞ÄÏûÖ', style: TextStyle(color: Colors.white)),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
